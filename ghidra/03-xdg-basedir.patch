From 01ffc081f1048af1c414561fc937c984904acc2c Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:24:27 +0200
Subject: [PATCH 1/8] Add `directories` dependency

---
 Ghidra/Framework/Utility/Module.manifest      |   1 +
 Ghidra/Framework/Utility/build.gradle         |   4 +
 Ghidra/RuntimeScripts/Linux/support/launch.sh |   2 +-
 licenses/Mozilla_Public_License_2.0.txt       | 373 ++++++++++++++++++
 4 files changed, 379 insertions(+), 1 deletion(-)
 create mode 100644 licenses/Mozilla_Public_License_2.0.txt

diff --git a/Ghidra/Framework/Utility/Module.manifest b/Ghidra/Framework/Utility/Module.manifest
index e69de29bb..748de0b92 100644
--- a/Ghidra/Framework/Utility/Module.manifest
+++ b/Ghidra/Framework/Utility/Module.manifest
@@ -0,0 +1 @@
+MODULE FILE LICENSE: lib/directories-26.jar Mozilla Public License 2.0
diff --git a/Ghidra/Framework/Utility/build.gradle b/Ghidra/Framework/Utility/build.gradle
index c3de3b753..d7258b470 100644
--- a/Ghidra/Framework/Utility/build.gradle
+++ b/Ghidra/Framework/Utility/build.gradle
@@ -21,3 +21,7 @@ apply from: "$rootProject.projectDir/gradle/javadoc.gradle"
 apply plugin: 'eclipse'
 
 eclipse.project.name = 'Framework Utility'
+
+dependencies {
+    api 'dev.dirs:directories:26'
+}
\ No newline at end of file
diff --git a/Ghidra/RuntimeScripts/Linux/support/launch.sh b/Ghidra/RuntimeScripts/Linux/support/launch.sh
index 97bb85470..efcf2d2a5 100755
--- a/Ghidra/RuntimeScripts/Linux/support/launch.sh
+++ b/Ghidra/RuntimeScripts/Linux/support/launch.sh
@@ -106,7 +106,7 @@ if [ -f "${SUPPORT_DIR}/launch.properties" ]; then
 
 	# Production Environment
 	INSTALL_DIR="${SUPPORT_DIR}/.."
-	CPATH="${INSTALL_DIR}/Ghidra/Framework/Utility/lib/Utility.jar"
+	CPATH="${INSTALL_DIR}/Ghidra/Framework/Utility/lib/Utility.jar:${INSTALL_DIR}/Ghidra/Framework/Utility/lib/directories-26.jar"
 	LS_CPATH="${SUPPORT_DIR}/LaunchSupport.jar"
 	DEBUG_LOG4J="${SUPPORT_DIR}/debug.log4j.xml"
 else
diff --git a/licenses/Mozilla_Public_License_2.0.txt b/licenses/Mozilla_Public_License_2.0.txt
new file mode 100644
index 000000000..a612ad981
--- /dev/null
+++ b/licenses/Mozilla_Public_License_2.0.txt
@@ -0,0 +1,373 @@
+Mozilla Public License Version 2.0
+==================================
+
+1. Definitions
+--------------
+
+1.1. "Contributor"
+    means each individual or legal entity that creates, contributes to
+    the creation of, or owns Covered Software.
+
+1.2. "Contributor Version"
+    means the combination of the Contributions of others (if any) used
+    by a Contributor and that particular Contributor's Contribution.
+
+1.3. "Contribution"
+    means Covered Software of a particular Contributor.
+
+1.4. "Covered Software"
+    means Source Code Form to which the initial Contributor has attached
+    the notice in Exhibit A, the Executable Form of such Source Code
+    Form, and Modifications of such Source Code Form, in each case
+    including portions thereof.
+
+1.5. "Incompatible With Secondary Licenses"
+    means
+
+    (a) that the initial Contributor has attached the notice described
+        in Exhibit B to the Covered Software; or
+
+    (b) that the Covered Software was made available under the terms of
+        version 1.1 or earlier of the License, but not also under the
+        terms of a Secondary License.
+
+1.6. "Executable Form"
+    means any form of the work other than Source Code Form.
+
+1.7. "Larger Work"
+    means a work that combines Covered Software with other material, in
+    a separate file or files, that is not Covered Software.
+
+1.8. "License"
+    means this document.
+
+1.9. "Licensable"
+    means having the right to grant, to the maximum extent possible,
+    whether at the time of the initial grant or subsequently, any and
+    all of the rights conveyed by this License.
+
+1.10. "Modifications"
+    means any of the following:
+
+    (a) any file in Source Code Form that results from an addition to,
+        deletion from, or modification of the contents of Covered
+        Software; or
+
+    (b) any new file in Source Code Form that contains any Covered
+        Software.
+
+1.11. "Patent Claims" of a Contributor
+    means any patent claim(s), including without limitation, method,
+    process, and apparatus claims, in any patent Licensable by such
+    Contributor that would be infringed, but for the grant of the
+    License, by the making, using, selling, offering for sale, having
+    made, import, or transfer of either its Contributions or its
+    Contributor Version.
+
+1.12. "Secondary License"
+    means either the GNU General Public License, Version 2.0, the GNU
+    Lesser General Public License, Version 2.1, the GNU Affero General
+    Public License, Version 3.0, or any later versions of those
+    licenses.
+
+1.13. "Source Code Form"
+    means the form of the work preferred for making modifications.
+
+1.14. "You" (or "Your")
+    means an individual or a legal entity exercising rights under this
+    License. For legal entities, "You" includes any entity that
+    controls, is controlled by, or is under common control with You. For
+    purposes of this definition, "control" means (a) the power, direct
+    or indirect, to cause the direction or management of such entity,
+    whether by contract or otherwise, or (b) ownership of more than
+    fifty percent (50%) of the outstanding shares or beneficial
+    ownership of such entity.
+
+2. License Grants and Conditions
+--------------------------------
+
+2.1. Grants
+
+Each Contributor hereby grants You a world-wide, royalty-free,
+non-exclusive license:
+
+(a) under intellectual property rights (other than patent or trademark)
+    Licensable by such Contributor to use, reproduce, make available,
+    modify, display, perform, distribute, and otherwise exploit its
+    Contributions, either on an unmodified basis, with Modifications, or
+    as part of a Larger Work; and
+
+(b) under Patent Claims of such Contributor to make, use, sell, offer
+    for sale, have made, import, and otherwise transfer either its
+    Contributions or its Contributor Version.
+
+2.2. Effective Date
+
+The licenses granted in Section 2.1 with respect to any Contribution
+become effective for each Contribution on the date the Contributor first
+distributes such Contribution.
+
+2.3. Limitations on Grant Scope
+
+The licenses granted in this Section 2 are the only rights granted under
+this License. No additional rights or licenses will be implied from the
+distribution or licensing of Covered Software under this License.
+Notwithstanding Section 2.1(b) above, no patent license is granted by a
+Contributor:
+
+(a) for any code that a Contributor has removed from Covered Software;
+    or
+
+(b) for infringements caused by: (i) Your and any other third party's
+    modifications of Covered Software, or (ii) the combination of its
+    Contributions with other software (except as part of its Contributor
+    Version); or
+
+(c) under Patent Claims infringed by Covered Software in the absence of
+    its Contributions.
+
+This License does not grant any rights in the trademarks, service marks,
+or logos of any Contributor (except as may be necessary to comply with
+the notice requirements in Section 3.4).
+
+2.4. Subsequent Licenses
+
+No Contributor makes additional grants as a result of Your choice to
+distribute the Covered Software under a subsequent version of this
+License (see Section 10.2) or under the terms of a Secondary License (if
+permitted under the terms of Section 3.3).
+
+2.5. Representation
+
+Each Contributor represents that the Contributor believes its
+Contributions are its original creation(s) or it has sufficient rights
+to grant the rights to its Contributions conveyed by this License.
+
+2.6. Fair Use
+
+This License is not intended to limit any rights You have under
+applicable copyright doctrines of fair use, fair dealing, or other
+equivalents.
+
+2.7. Conditions
+
+Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted
+in Section 2.1.
+
+3. Responsibilities
+-------------------
+
+3.1. Distribution of Source Form
+
+All distribution of Covered Software in Source Code Form, including any
+Modifications that You create or to which You contribute, must be under
+the terms of this License. You must inform recipients that the Source
+Code Form of the Covered Software is governed by the terms of this
+License, and how they can obtain a copy of this License. You may not
+attempt to alter or restrict the recipients' rights in the Source Code
+Form.
+
+3.2. Distribution of Executable Form
+
+If You distribute Covered Software in Executable Form then:
+
+(a) such Covered Software must also be made available in Source Code
+    Form, as described in Section 3.1, and You must inform recipients of
+    the Executable Form how they can obtain a copy of such Source Code
+    Form by reasonable means in a timely manner, at a charge no more
+    than the cost of distribution to the recipient; and
+
+(b) You may distribute such Executable Form under the terms of this
+    License, or sublicense it under different terms, provided that the
+    license for the Executable Form does not attempt to limit or alter
+    the recipients' rights in the Source Code Form under this License.
+
+3.3. Distribution of a Larger Work
+
+You may create and distribute a Larger Work under terms of Your choice,
+provided that You also comply with the requirements of this License for
+the Covered Software. If the Larger Work is a combination of Covered
+Software with a work governed by one or more Secondary Licenses, and the
+Covered Software is not Incompatible With Secondary Licenses, this
+License permits You to additionally distribute such Covered Software
+under the terms of such Secondary License(s), so that the recipient of
+the Larger Work may, at their option, further distribute the Covered
+Software under the terms of either this License or such Secondary
+License(s).
+
+3.4. Notices
+
+You may not remove or alter the substance of any license notices
+(including copyright notices, patent notices, disclaimers of warranty,
+or limitations of liability) contained within the Source Code Form of
+the Covered Software, except that You may alter any license notices to
+the extent required to remedy known factual inaccuracies.
+
+3.5. Application of Additional Terms
+
+You may choose to offer, and to charge a fee for, warranty, support,
+indemnity or liability obligations to one or more recipients of Covered
+Software. However, You may do so only on Your own behalf, and not on
+behalf of any Contributor. You must make it absolutely clear that any
+such warranty, support, indemnity, or liability obligation is offered by
+You alone, and You hereby agree to indemnify every Contributor for any
+liability incurred by such Contributor as a result of warranty, support,
+indemnity or liability terms You offer. You may include additional
+disclaimers of warranty and limitations of liability specific to any
+jurisdiction.
+
+4. Inability to Comply Due to Statute or Regulation
+---------------------------------------------------
+
+If it is impossible for You to comply with any of the terms of this
+License with respect to some or all of the Covered Software due to
+statute, judicial order, or regulation then You must: (a) comply with
+the terms of this License to the maximum extent possible; and (b)
+describe the limitations and the code they affect. Such description must
+be placed in a text file included with all distributions of the Covered
+Software under this License. Except to the extent prohibited by statute
+or regulation, such description must be sufficiently detailed for a
+recipient of ordinary skill to be able to understand it.
+
+5. Termination
+--------------
+
+5.1. The rights granted under this License will terminate automatically
+if You fail to comply with any of its terms. However, if You become
+compliant, then the rights granted under this License from a particular
+Contributor are reinstated (a) provisionally, unless and until such
+Contributor explicitly and finally terminates Your grants, and (b) on an
+ongoing basis, if such Contributor fails to notify You of the
+non-compliance by some reasonable means prior to 60 days after You have
+come back into compliance. Moreover, Your grants from a particular
+Contributor are reinstated on an ongoing basis if such Contributor
+notifies You of the non-compliance by some reasonable means, this is the
+first time You have received notice of non-compliance with this License
+from such Contributor, and You become compliant prior to 30 days after
+Your receipt of the notice.
+
+5.2. If You initiate litigation against any entity by asserting a patent
+infringement claim (excluding declaratory judgment actions,
+counter-claims, and cross-claims) alleging that a Contributor Version
+directly or indirectly infringes any patent, then the rights granted to
+You by any and all Contributors for the Covered Software under Section
+2.1 of this License shall terminate.
+
+5.3. In the event of termination under Sections 5.1 or 5.2 above, all
+end user license agreements (excluding distributors and resellers) which
+have been validly granted by You or Your distributors under this License
+prior to termination shall survive termination.
+
+************************************************************************
+*                                                                      *
+*  6. Disclaimer of Warranty                                           *
+*  -------------------------                                           *
+*                                                                      *
+*  Covered Software is provided under this License on an "as is"       *
+*  basis, without warranty of any kind, either expressed, implied, or  *
+*  statutory, including, without limitation, warranties that the       *
+*  Covered Software is free of defects, merchantable, fit for a        *
+*  particular purpose or non-infringing. The entire risk as to the     *
+*  quality and performance of the Covered Software is with You.        *
+*  Should any Covered Software prove defective in any respect, You     *
+*  (not any Contributor) assume the cost of any necessary servicing,   *
+*  repair, or correction. This disclaimer of warranty constitutes an   *
+*  essential part of this License. No use of any Covered Software is   *
+*  authorized under this License except under this disclaimer.         *
+*                                                                      *
+************************************************************************
+
+************************************************************************
+*                                                                      *
+*  7. Limitation of Liability                                          *
+*  --------------------------                                          *
+*                                                                      *
+*  Under no circumstances and under no legal theory, whether tort      *
+*  (including negligence), contract, or otherwise, shall any           *
+*  Contributor, or anyone who distributes Covered Software as          *
+*  permitted above, be liable to You for any direct, indirect,         *
+*  special, incidental, or consequential damages of any character      *
+*  including, without limitation, damages for lost profits, loss of    *
+*  goodwill, work stoppage, computer failure or malfunction, or any    *
+*  and all other commercial damages or losses, even if such party      *
+*  shall have been informed of the possibility of such damages. This   *
+*  limitation of liability shall not apply to liability for death or   *
+*  personal injury resulting from such party's negligence to the       *
+*  extent applicable law prohibits such limitation. Some               *
+*  jurisdictions do not allow the exclusion or limitation of           *
+*  incidental or consequential damages, so this exclusion and          *
+*  limitation may not apply to You.                                    *
+*                                                                      *
+************************************************************************
+
+8. Litigation
+-------------
+
+Any litigation relating to this License may be brought only in the
+courts of a jurisdiction where the defendant maintains its principal
+place of business and such litigation shall be governed by laws of that
+jurisdiction, without reference to its conflict-of-law provisions.
+Nothing in this Section shall prevent a party's ability to bring
+cross-claims or counter-claims.
+
+9. Miscellaneous
+----------------
+
+This License represents the complete agreement concerning the subject
+matter hereof. If any provision of this License is held to be
+unenforceable, such provision shall be reformed only to the extent
+necessary to make it enforceable. Any law or regulation which provides
+that the language of a contract shall be construed against the drafter
+shall not be used to construe this License against a Contributor.
+
+10. Versions of the License
+---------------------------
+
+10.1. New Versions
+
+Mozilla Foundation is the license steward. Except as provided in Section
+10.3, no one other than the license steward has the right to modify or
+publish new versions of this License. Each version will be given a
+distinguishing version number.
+
+10.2. Effect of New Versions
+
+You may distribute the Covered Software under the terms of the version
+of the License under which You originally received the Covered Software,
+or under the terms of any subsequent version published by the license
+steward.
+
+10.3. Modified Versions
+
+If you create software not governed by this License, and you want to
+create a new license for such software, you may create and use a
+modified version of this License if you rename the license and remove
+any references to the name of the license steward (except to note that
+such modified license differs from this License).
+
+10.4. Distributing Source Code Form that is Incompatible With Secondary
+Licenses
+
+If You choose to distribute Source Code Form that is Incompatible With
+Secondary Licenses under the terms of this version of the License, the
+notice described in Exhibit B of this License must be attached.
+
+Exhibit A - Source Code Form License Notice
+-------------------------------------------
+
+  This Source Code Form is subject to the terms of the Mozilla Public
+  License, v. 2.0. If a copy of the MPL was not distributed with this
+  file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+If it is not possible or desirable to put the notice in a particular
+file, then You may include the notice in a location (such as a LICENSE
+file in a relevant directory) where a recipient would be likely to look
+for such a notice.
+
+You may add additional accurate notices of copyright ownership.
+
+Exhibit B - "Incompatible With Secondary Licenses" Notice
+---------------------------------------------------------
+
+  This Source Code Form is "Incompatible With Secondary Licenses", as
+  defined by the Mozilla Public License, v. 2.0.
-- 
2.40.1


From d353fc1aa56e7b24483cc571a6bb90cce600e677 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:26:14 +0200
Subject: [PATCH 2/8] Use a project directory for `getDefaultUserSettingsDir`

---
 .../java/ghidra/framework/GenericRunInfo.java |  6 +++---
 .../application/ApplicationUtilities.java     | 20 +++++++++----------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/GenericRunInfo.java b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/GenericRunInfo.java
index c4c972cbf..9cb0c457e 100644
--- a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/GenericRunInfo.java
+++ b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/GenericRunInfo.java
@@ -81,15 +81,15 @@ public class GenericRunInfo {
 	private static List<File> collectAllApplicationDirectories(File dataDirectoryParentDir) {
 
 		String settingsDirPrefix =
-			"." + Application.getName().replaceAll("\\s", "").toLowerCase();
+			Application.getName().replaceAll("\\s", "").toLowerCase();
 		FileFilter userDirFilter = f -> {
 			String name = f.getName();
 			return f.isDirectory() && name.startsWith(settingsDirPrefix) &&
 				!name.endsWith(TEST_DIRECTORY_SUFFIX);
 		};
 
-		// The current directory structure--rooted under '.<application name>'.   For example,
-		// /some/path/<user home>/.application_name/..application_name_application-version
+		// The current directory structure--rooted under '$XDG_CONFIG_HOME/<application name>'.
+		// For example, /some/path/<user home>/.config/ghidra/application-version
 		File[] userDirs = dataDirectoryParentDir.listFiles(userDirFilter);
 		return CollectionUtils.asList(userDirs);
 	}
diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
index ea12a661f..319fd4211 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
@@ -19,6 +19,7 @@ import java.io.*;
 import java.util.ArrayList;
 import java.util.Collection;
 
+import dev.dirs.ProjectDirectories;
 import generic.jar.ResourceFile;
 import ghidra.framework.*;
 import ghidra.util.Msg;
@@ -195,29 +196,28 @@ public class ApplicationUtilities {
 		return getDefaultUserTempDir(applicationProperties);
 	}
 
+	public static ProjectDirectories getProjectDirectories(String applicationName) {
+		return ProjectDirectories.from("gov", "NSA", applicationName);
+	}
+
 	/**
 	 * Gets the default application's user settings directory.
 	 * 
 	 * @param applicationProperties The application properties.
 	 * @param installationDirectory The application installation directory.
 	 * @return The application's user settings directory.
-	 * @throws FileNotFoundException if the user settings directory could not be determined.
 	 */
 	public static File getDefaultUserSettingsDir(ApplicationProperties applicationProperties,
-			ResourceFile installationDirectory) throws FileNotFoundException {
-
-		String homedir = System.getProperty("user.home");
-		if (homedir == null || homedir.isEmpty()) {
-			throw new FileNotFoundException("System property \"user.home\" is not set!");
-		}
+			ResourceFile installationDirectory) {
 
 		ApplicationIdentifier applicationIdentifier =
 			new ApplicationIdentifier(applicationProperties);
 
-		File userSettingsParentDir =
-			new File(homedir, "." + applicationIdentifier.getApplicationName());
+		ProjectDirectories dirs = getProjectDirectories(applicationIdentifier.getApplicationName());
 
-		String userSettingsDirName = "." + applicationIdentifier;
+		File userSettingsParentDir = new File(dirs.configDir);
+
+		String userSettingsDirName = applicationIdentifier.toString();
 
 		if (SystemUtilities.isInDevelopmentMode()) {
 			// Add the application's installation directory name to this variable, so that each 
-- 
2.40.1


From fb4e79effbb23d4fe7dbcbfbd54f5275136c1c51 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:29:35 +0200
Subject: [PATCH 3/8] Use a project directory for `getDefaultUserCacheDir`

---
 .../application/ApplicationUtilities.java     | 37 +++++--------------
 1 file changed, 9 insertions(+), 28 deletions(-)

diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
index 319fd4211..3466d6b49 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
@@ -154,15 +154,17 @@ public class ApplicationUtilities {
 			SystemUtilities.getUserName() + "-" + applicationProperties.getApplicationName());
 	}
 
+	public static ProjectDirectories getProjectDirectories(String applicationName) {
+		return ProjectDirectories.from("gov", "NSA", applicationName);
+	}
+
 	/**
 	 * Gets the default application's user cache directory.
 	 * 
 	 * @param applicationProperties The application properties.
 	 * @return The default application's user cache directory.
-	 * @throws FileNotFoundException if the user cache directory could not be determined.
 	 */
-	public static File getDefaultUserCacheDir(ApplicationProperties applicationProperties)
-			throws FileNotFoundException {
+	public static File getDefaultUserCacheDir(ApplicationProperties applicationProperties) {
 
 		// Look for preset cache directory
 		String cachedir = System.getProperty("application.cachedir", "").trim();
@@ -171,33 +173,12 @@ public class ApplicationUtilities {
 				SystemUtilities.getUserName() + "-" + applicationProperties.getApplicationName());
 		}
 
-		// Handle Windows specially
-		if (OperatingSystem.CURRENT_OPERATING_SYSTEM == OperatingSystem.WINDOWS) {
-			File localAppDataDir = null;
-			String localAppDataDirPath = System.getenv("LOCALAPPDATA"); // e.g., /Users/myname/AppData/Local
-			if (localAppDataDirPath != null && !localAppDataDirPath.isEmpty()) {
-				localAppDataDir = new File(localAppDataDirPath);
-			}
-			else {
-				String userHome = System.getProperty("user.home");
-				if (userHome != null) {
-					localAppDataDir = new File(userHome, "AppData\\Local");
-					if (!localAppDataDir.isDirectory()) {
-						localAppDataDir = new File(userHome, "Local Settings");
-					}
-				}
-			}
-			if (localAppDataDir != null && localAppDataDir.isDirectory()) {
-				return new File(localAppDataDir, applicationProperties.getApplicationName());
-			}
-		}
+		ApplicationIdentifier applicationIdentifier =
+				new ApplicationIdentifier(applicationProperties);
 
-		// Use user temp directory if platform specific scheme does not exist above or it failed
-		return getDefaultUserTempDir(applicationProperties);
-	}
+		ProjectDirectories dirs = getProjectDirectories(applicationIdentifier.getApplicationName());
 
-	public static ProjectDirectories getProjectDirectories(String applicationName) {
-		return ProjectDirectories.from("gov", "NSA", applicationName);
+		return new File(dirs.cacheDir);
 	}
 
 	/**
-- 
2.40.1


From 6d7b2be4cf8e330ba0e2761a69f789cdf0a48c78 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:32:54 +0200
Subject: [PATCH 4/8] Use document directory for Ghidra scripts

---
 .../src/main/java/ghidra/app/script/GhidraScriptUtil.java     | 4 +++-
 .../ghidraprojectcreator/utils/GhidraScriptUtils.java         | 3 ++-
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/script/GhidraScriptUtil.java b/Ghidra/Features/Base/src/main/java/ghidra/app/script/GhidraScriptUtil.java
index 382b7c67a..d23291903 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/script/GhidraScriptUtil.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/script/GhidraScriptUtil.java
@@ -24,6 +24,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+import dev.dirs.UserDirectories;
 import generic.jar.ResourceFile;
 import ghidra.app.plugin.core.osgi.BundleHost;
 import ghidra.app.plugin.core.osgi.OSGiException;
@@ -157,7 +158,8 @@ public class GhidraScriptUtil {
 	 */
 	private static String buildUserScriptsDirectory() {
 
-		String root = System.getProperty("user.home");
+		UserDirectories dirs = UserDirectories.get();
+		String root = dirs.documentDir;
 		String override = System.getProperty(GhidraScriptConstants.USER_SCRIPTS_DIR_PROPERTY);
 		if (override != null) {
 			Msg.debug(GhidraScriptUtil.class, "Using Ghidra script source directory: " + root);
diff --git a/GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/src/main/java/ghidradev/ghidraprojectcreator/utils/GhidraScriptUtils.java b/GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/src/main/java/ghidradev/ghidraprojectcreator/utils/GhidraScriptUtils.java
index ed083d01d..64c925b95 100644
--- a/GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/src/main/java/ghidradev/ghidraprojectcreator/utils/GhidraScriptUtils.java
+++ b/GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/src/main/java/ghidradev/ghidraprojectcreator/utils/GhidraScriptUtils.java
@@ -19,6 +19,7 @@ import java.io.*;
 import java.text.ParseException;
 import java.util.*;
 
+import dev.dirs.UserDirectories;
 import org.eclipse.core.resources.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.jdt.core.*;
@@ -33,7 +34,7 @@ import ghidradev.Activator;
 public class GhidraScriptUtils {
 
 	public static File userScriptsDir =
-		new File(System.getProperty("user.home") + "/ghidra_scripts");
+		new File(UserDirectories.get().documentDir, "ghidra_scripts");
 
 	/**
 	 * Creates a new Ghidra script project with the given name.
-- 
2.40.1


From 2bd0124a73928a9f0d753668feb48681579c5f5b Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:49:46 +0200
Subject: [PATCH 5/8] Add a log directory and move `application.log` there

---
 .../main/java/ghidra/framework/Application.java |  4 ++--
 .../java/ghidra/GhidraApplicationLayout.java    |  2 ++
 .../utility/application/ApplicationLayout.java  | 17 +++++++++++++++++
 .../application/ApplicationUtilities.java       | 15 +++++++++++++++
 4 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
index e67653b67..a24a971e2 100644
--- a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
+++ b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
@@ -167,10 +167,10 @@ public class Application {
 		app.loggingInitialized = true;
 
 		if (logFile == null) {
-			logFile = new File(app.layout.getUserSettingsDir(), "application.log");
+			logFile = new File(app.layout.getUserLogDir(), "application.log");
 		}
 		if (scriptLogFile == null) {
-			scriptLogFile = new File(app.layout.getUserSettingsDir(), "script.log");
+			scriptLogFile = new File(app.layout.getUserLogDir(), "script.log");
 		}
 
 		LoggingInitialization.setApplicationLogFile(logFile);
diff --git a/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java b/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
index ad3fd284d..9ec60682f 100644
--- a/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
+++ b/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
@@ -55,6 +55,7 @@ public class GhidraApplicationLayout extends ApplicationLayout {
 		// User directories
 		userTempDir = ApplicationUtilities.getDefaultUserTempDir(getApplicationProperties());
 		userCacheDir = ApplicationUtilities.getDefaultUserCacheDir(getApplicationProperties());
+		userLogDir = ApplicationUtilities.getDefaultUserLogDir(getApplicationProperties());
 		userSettingsDir = ApplicationUtilities.getDefaultUserSettingsDir(getApplicationProperties(),
 			getApplicationInstallationDir());
 
@@ -98,6 +99,7 @@ public class GhidraApplicationLayout extends ApplicationLayout {
 		// User directories
 		userTempDir = ApplicationUtilities.getDefaultUserTempDir(getApplicationProperties());
 		userCacheDir = ApplicationUtilities.getDefaultUserCacheDir(getApplicationProperties());
+		userLogDir = ApplicationUtilities.getDefaultUserLogDir(getApplicationProperties());
 		userSettingsDir = ApplicationUtilities.getDefaultUserSettingsDir(getApplicationProperties(),
 			getApplicationInstallationDir());
 
diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
index 75cbb2414..386115576 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
@@ -40,6 +40,7 @@ public abstract class ApplicationLayout {
 	protected Map<String, GModule> modules;
 	protected File userTempDir;
 	protected File userCacheDir;
+	protected File userLogDir;
 	protected File userSettingsDir;
 	protected ResourceFile patchDir;
 	protected ResourceFile extensionArchiveDir;
@@ -90,6 +91,15 @@ public abstract class ApplicationLayout {
 		return userTempDir;
 	}
 
+	/**
+	 * Gets the user log directory from the application layout.
+	 *
+	 * @return The user log directory (or null if not set).
+	 */
+	public final File getUserLogDir() {
+		return userLogDir;
+	}
+
 	/**
 	 * Gets the user cache directory from the application layout.
 	 *
@@ -151,6 +161,13 @@ public abstract class ApplicationLayout {
 			FileUtilities.setOwnerOnlyPermissions(userTempDir);
 		}
 
+		if (userLogDir != null) {
+			if (!FileUtilities.mkdirs(userLogDir)) {
+				throw new IOException("Failed to create user log directory: " + userLogDir);
+			}
+			FileUtilities.setOwnerOnlyPermissions(userLogDir);
+		}
+
 		if (userCacheDir != null) {
 			if (!FileUtilities.mkdirs(userCacheDir)) {
 				throw new IOException("Failed to create user cache directory: " + userCacheDir);
diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
index 3466d6b49..0269f3adf 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
@@ -158,6 +158,21 @@ public class ApplicationUtilities {
 		return ProjectDirectories.from("gov", "NSA", applicationName);
 	}
 
+	/**
+	 * Gets the default application's user log directory.
+	 *
+	 * @param applicationProperties The application properties.
+	 * @return The default application's user cache directory.
+	 */
+	public static File getDefaultUserLogDir(ApplicationProperties applicationProperties) {
+		ApplicationIdentifier applicationIdentifier =
+				new ApplicationIdentifier(applicationProperties);
+
+		ProjectDirectories dirs = getProjectDirectories(applicationIdentifier.getApplicationName());
+
+		return new File(dirs.cacheDir, "logs");
+	}
+
 	/**
 	 * Gets the default application's user cache directory.
 	 * 
-- 
2.40.1


From 9134e90096d86becc2e3aa3b7eb654539e9acb50 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:51:46 +0200
Subject: [PATCH 6/8] Move `"tools"` to user state directory

---
 .../main/java/ghidra/framework/Application.java   |  9 +++++++++
 .../src/main/java/ghidra/framework/ToolUtils.java |  4 ++--
 .../main/java/ghidra/GhidraApplicationLayout.java |  2 ++
 .../utility/application/ApplicationLayout.java    | 11 +++++++++++
 .../utility/application/ApplicationUtilities.java | 15 +++++++++++++++
 5 files changed, 39 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
index a24a971e2..31b1fefd7 100644
--- a/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
+++ b/Ghidra/Framework/Generic/src/main/java/ghidra/framework/Application.java
@@ -618,6 +618,15 @@ public class Application {
 		return app.layout.getUserSettingsDir();
 	}
 
+	/**
+	 * Returns the File containing the user state for this application.
+	 * @return the File containing the user state for this application.
+	 */
+	public static File getUserStateDirectory() {
+		checkAppInitialized();
+		return app.layout.getUserStateDir();
+	}
+
 	/**
 	 * Returns the temporary directory specific to the user and the application.
 	 * Directory has name of &lt;username&gt;-&lt;appname&gt;
diff --git a/Ghidra/Framework/Project/src/main/java/ghidra/framework/ToolUtils.java b/Ghidra/Framework/Project/src/main/java/ghidra/framework/ToolUtils.java
index 73872ea8f..e83a789b3 100644
--- a/Ghidra/Framework/Project/src/main/java/ghidra/framework/ToolUtils.java
+++ b/Ghidra/Framework/Project/src/main/java/ghidra/framework/ToolUtils.java
@@ -351,7 +351,7 @@ public class ToolUtils {
 	 * @return the path
 	 */
 	public static String getApplicationToolDirPath() {
-		String userSettingsPath = Application.getUserSettingsDirectory().getAbsolutePath();
-		return userSettingsPath + File.separatorChar + ProjectManager.APPLICATION_TOOLS_DIR_NAME;
+		String userStatePath = Application.getUserStateDirectory().getAbsolutePath();
+		return userStatePath + File.separatorChar + ProjectManager.APPLICATION_TOOLS_DIR_NAME;
 	}
 }
diff --git a/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java b/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
index 9ec60682f..39fddafdc 100644
--- a/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
+++ b/Ghidra/Framework/Utility/src/main/java/ghidra/GhidraApplicationLayout.java
@@ -54,6 +54,7 @@ public class GhidraApplicationLayout extends ApplicationLayout {
 
 		// User directories
 		userTempDir = ApplicationUtilities.getDefaultUserTempDir(getApplicationProperties());
+		userStateDir = ApplicationUtilities.getDefaultUserStateDir(getApplicationProperties());
 		userCacheDir = ApplicationUtilities.getDefaultUserCacheDir(getApplicationProperties());
 		userLogDir = ApplicationUtilities.getDefaultUserLogDir(getApplicationProperties());
 		userSettingsDir = ApplicationUtilities.getDefaultUserSettingsDir(getApplicationProperties(),
@@ -98,6 +99,7 @@ public class GhidraApplicationLayout extends ApplicationLayout {
 
 		// User directories
 		userTempDir = ApplicationUtilities.getDefaultUserTempDir(getApplicationProperties());
+		userStateDir = ApplicationUtilities.getDefaultUserStateDir(getApplicationProperties());
 		userCacheDir = ApplicationUtilities.getDefaultUserCacheDir(getApplicationProperties());
 		userLogDir = ApplicationUtilities.getDefaultUserLogDir(getApplicationProperties());
 		userSettingsDir = ApplicationUtilities.getDefaultUserSettingsDir(getApplicationProperties(),
diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
index 386115576..c53edc1b8 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationLayout.java
@@ -39,6 +39,7 @@ public abstract class ApplicationLayout {
 	protected ResourceFile applicationInstallationDir;
 	protected Map<String, GModule> modules;
 	protected File userTempDir;
+	protected File userStateDir;
 	protected File userCacheDir;
 	protected File userLogDir;
 	protected File userSettingsDir;
@@ -91,6 +92,16 @@ public abstract class ApplicationLayout {
 		return userTempDir;
 	}
 
+	/**
+	 * Gets the user state directory from the application layout.
+	 *
+	 * @return The user state directory (or null if not set).
+ 	*/
+	public final File getUserStateDir() {
+		return userStateDir;
+	}
+
+
 	/**
 	 * Gets the user log directory from the application layout.
 	 *
diff --git a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
index 0269f3adf..d7f64c867 100644
--- a/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
+++ b/Ghidra/Framework/Utility/src/main/java/utility/application/ApplicationUtilities.java
@@ -137,6 +137,21 @@ public class ApplicationUtilities {
 		return repoApplicationRootDirs;
 	}
 
+	/**
+	 * Gets the default application's user state directory.
+	 *
+	 * @param applicationProperties The application properties.
+	 * @return The default application's user state directory.
+	 */
+	public static File getDefaultUserStateDir(ApplicationProperties applicationProperties) {
+		ApplicationIdentifier applicationIdentifier =
+				new ApplicationIdentifier(applicationProperties);
+
+		ProjectDirectories dirs = getProjectDirectories(applicationIdentifier.getApplicationName());
+
+		return new File(dirs.dataDir);
+	}
+
 	/**
 	 * Gets the default application's user temp directory.
 	 * 
-- 
2.40.1


From 9ea5a61b1b821671559d5f868e35957a16a9c9dc Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 20:52:17 +0200
Subject: [PATCH 7/8] Move Felix cache to the user cache directory

---
 .../main/java/ghidra/app/plugin/core/osgi/BundleHost.java    | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/BundleHost.java b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/BundleHost.java
index f760055fb..c407752a6 100644
--- a/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/BundleHost.java
+++ b/Ghidra/Features/Base/src/main/java/ghidra/app/plugin/core/osgi/BundleHost.java
@@ -358,7 +358,7 @@ public class BundleHost {
 	 * @return the path
 	 */
 	public static Path getOsgiDir() {
-		Path usersettings = Application.getUserSettingsDirectory().toPath();
+		Path usersettings = Application.getUserStateDirectory().toPath();
 		return usersettings.resolve("osgi");
 	}
 
@@ -368,7 +368,8 @@ public class BundleHost {
 	 * @return the directory
 	 */
 	private static Path getCacheDir() {
-		return BundleHost.getOsgiDir().resolve("felixcache");
+		Path userCache = Application.getUserCacheDirectory().toPath();
+		return userCache.resolve("felix");
 	}
 
 	private static String makeCacheDir() throws IOException {
-- 
2.40.1


From f7ff71fa88786b403d0c78d5c187c5b11c28ebda Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 25 Jun 2023 11:17:15 +0300
Subject: [PATCH 8/8] Ignore log files in IP check

---
 gradle/support/ip.gradle | 1 +
 1 file changed, 1 insertion(+)

diff --git a/gradle/support/ip.gradle b/gradle/support/ip.gradle
index 2b01fac95..ffe9ce329 100644
--- a/gradle/support/ip.gradle
+++ b/gradle/support/ip.gradle
@@ -134,6 +134,7 @@ def Map<String, List<String>> getIpForModule(Project p) {
 		exclude "**/data/build.xml" // language build file (generated for dev only)
 		exclude "**/.vs/**"
 		exclude "**/*.vcxproj.user"
+		exclude "*.log"
 	}
 	tree.each { file ->
 			String ip = getIp(p.projectDir, file)
-- 
2.40.1

