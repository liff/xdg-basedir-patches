From 3f7ae71f492f2840c0c7bead77d3db6152122d6f Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 22:48:53 +0200
Subject: [PATCH 1/3] Move font cache to `XDG_CACHE_HOME`

---
 .../unix/classes/sun/font/FcFontConfiguration.java           | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
index 0ea741c1ccf..47817657253 100644
--- a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
+++ b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
@@ -368,7 +368,10 @@ public class FcFontConfiguration extends FontConfiguration {
             String userDir = System.getProperty("user.home");
             String version = System.getProperty("java.version");
             String fs = File.separator;
-            String dir = userDir+fs+".java"+fs+"fonts"+fs+version;
+            String xdgCacheDir = System.getenv("XDG_CACHE_HOME");
+            if (xdgCacheDir == null)
+                xdgCacheDir = userDir+fs+".cache";
+            String dir = xdgCacheDir+fs+"java"+fs+"fonts"+fs+version;
             Locale locale = SunToolkit.getStartupLocale();
             String lang = locale.getLanguage();
             String country = locale.getCountry();
-- 
2.39.2


From 20b5c4a1555a3c1fe094967fb530e1c7fd3cbc22 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Tue, 13 Dec 2022 22:51:01 +0200
Subject: [PATCH 2/3] Move default preferences directory to `XDG_CONFIG_HOME`

---
 .../java/util/prefs/FileSystemPreferences.java       | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
index b30a23465c5..1757ab9ecd6 100644
--- a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
+++ b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
@@ -114,9 +114,15 @@ class FileSystemPreferences extends AbstractPreferences {
     private static void setupUserRoot() {
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
-                userRootDir =
-                      new File(System.getProperty("java.util.prefs.userRoot",
-                      System.getProperty("user.home")), ".java/.userPrefs");
+                String preferredUserRoot = System.getProperty("java.util.prefs.userRoot");
+                String userHome = System.getProperty("user.home");
+                String xdgConfigHome = System.getenv("XDG_CONFIG_HOME");
+                if (xdgConfigHome == null)
+                    xdgConfigHome = userHome + File.separator + ".config";
+                if (preferredUserRoot == null)
+                    userRootDir = new File(xdgConfigHome, "java" + File.separator + "userPrefs");
+                else
+                    userRootDir = new File(preferredUserRoot, ".java/.userPrefs");
                 // Attempt to create root dir if it does not yet exist.
                 if (!userRootDir.exists()) {
                     if (userRootDir.mkdirs()) {
-- 
2.39.2


From 69590f37605500709bf7319732745211d8b3e6e8 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Thu, 27 Apr 2023 14:34:20 +0300
Subject: [PATCH 3/3] Redirect all dotfiles to `.cache/java-crud`

---
 src/java.base/share/classes/java/io/File.java | 81 +++++++++++++++----
 1 file changed, 67 insertions(+), 14 deletions(-)

diff --git a/src/java.base/share/classes/java/io/File.java b/src/java.base/share/classes/java/io/File.java
index 36a465ba53f..90ec2fd6532 100644
--- a/src/java.base/share/classes/java/io/File.java
+++ b/src/java.base/share/classes/java/io/File.java
@@ -35,6 +35,7 @@ import java.nio.file.Path;
 import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.List;
+import static jdk.internal.util.StaticProperty.userHome;
 import sun.security.action.GetPropertyAction;
 
 /**
@@ -248,7 +249,7 @@ public class File
      * Internal constructor for already-normalized pathname strings.
      */
     private File(String pathname, int prefixLength) {
-        this.path = pathname;
+        this.path = adjust(pathname);
         this.prefixLength = prefixLength;
     }
 
@@ -260,7 +261,7 @@ public class File
     private File(String child, File parent) {
         assert parent.path != null;
         assert (!parent.path.isEmpty());
-        this.path = fs.resolve(parent.path, child);
+        this.path = adjust(fs.resolve(parent.path, child));
         this.prefixLength = parent.prefixLength;
     }
 
@@ -277,7 +278,7 @@ public class File
         if (pathname == null) {
             throw new NullPointerException();
         }
-        this.path = fs.normalize(pathname);
+        this.path = adjust(fs.normalize(pathname));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -319,14 +320,14 @@ public class File
         }
         if (parent != null) {
             if (parent.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(fs.normalize(parent),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.normalize(parent),
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -362,14 +363,14 @@ public class File
         }
         if (parent != null) {
             if (parent.path.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(parent.path,
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(parent.path,
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -435,7 +436,7 @@ public class File
         p = fs.fromURIPath(p);
         if (File.separatorChar != '/')
             p = p.replace('/', File.separatorChar);
-        this.path = fs.normalize(p);
+        this.path = adjust(fs.normalize(p));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -2391,4 +2392,56 @@ public class File
         }
         return result;
     }
+
+    private static String getXdg(String var, String dir) {
+        String env = System.getenv(var);
+        if (env == null) {
+            return userHome() + "/" + dir;
+        }
+        return env;
+    }
+
+    private static String getXdgConfigHome() {
+        return getXdg("XDG_CONFIG_HOME", ".config");
+    }
+
+    private static String getXdgCacheHome() {
+        return getXdg("XDG_CACHE_HOME", ".cache");
+    }
+
+    private static String getXdgDataHome() {
+        return getXdg("XDG_DATA_HOME", ".local/share");
+    }
+
+    private static String getXdgStateHome() {
+        return getXdg("XDG_STATE_HOME", ".local/state");
+    }
+
+    private static boolean isAcceptableDotFile(String path) {
+        return path.equals(userHome() + "/.")
+            || path.equals(userHome() + "/..")
+            || path.equals(getXdgConfigHome())
+            || path.startsWith(getXdgConfigHome() + "/")
+            || path.equals(getXdgCacheHome())
+            || path.startsWith(getXdgCacheHome() + "/")
+            || path.equals(getXdgDataHome())
+            || path.startsWith(getXdgDataHome() + "/")
+            || path.equals(getXdgStateHome())
+            || path.startsWith(getXdgStateHome() + "/");
+    }
+
+    private static String getCrud() {
+    	return getXdgCacheHome() + "/java-crud";
+    }
+
+    private static String crud = getCrud();
+
+    private static String adjust(String path) {
+        if (path.startsWith(userHome() + "/.")) {
+            if (isAcceptableDotFile(path))
+                return path;
+            return crud + "/" + path.substring(userHome().length() + 2); // +2 for the leading dot
+        }
+        return path;
+    }
 }
-- 
2.39.2

