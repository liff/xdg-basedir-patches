From 145d65617d66912b6f52f12e3e117daaf0cd443b Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:18:28 +0300
Subject: [PATCH 1/6] Add XDG base directories as system properties

---
 .../jdk/internal/util/SystemProps.java        | 15 ++++++++++++-
 src/java.base/share/native/libjava/System.c   |  5 +++++
 .../share/native/libjava/java_props.h         |  4 ++++
 .../unix/native/libjava/java_props_md.c       | 22 +++++++++++++++++++
 4 files changed, 45 insertions(+), 1 deletion(-)

diff --git a/src/java.base/share/classes/jdk/internal/util/SystemProps.java b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
index b6aa1ef855e..5b7a3e1203f 100644
--- a/src/java.base/share/classes/jdk/internal/util/SystemProps.java
+++ b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
@@ -74,6 +74,15 @@ public final class SystemProps {
         putIfAbsent(props, "user.dir", raw.propDefault(Raw._user_dir_NDX));
         putIfAbsent(props, "user.name", raw.propDefault(Raw._user_name_NDX));
 
+	String configHome = raw.propDefault(Raw._xdg_config_home_NDX);
+	String cacheHome = raw.propDefault(Raw._xdg_cache_home_NDX);
+	String dataHome = raw.propDefault(Raw._xdg_data_home_NDX);
+	String stateHome = raw.propDefault(Raw._xdg_state_home_NDX);
+	putIfAbsent(props, "xdg.config.home", configHome);
+	putIfAbsent(props, "xdg.cache.home", cacheHome);
+	putIfAbsent(props, "xdg.data.home", dataHome);
+	putIfAbsent(props, "xdg.state.home", stateHome);
+
         // Platform defined encoding cannot be overridden on the command line
         put(props, "sun.jnu.encoding", raw.propDefault(Raw._sun_jnu_encoding_NDX));
         var nativeEncoding = ((raw.propDefault(Raw._file_encoding_NDX) == null)
@@ -253,7 +262,11 @@ public final class SystemProps {
         @Native private static final int _user_dir_NDX = 1 + _sun_os_patch_level_NDX;
         @Native private static final int _user_home_NDX = 1 + _user_dir_NDX;
         @Native private static final int _user_name_NDX = 1 + _user_home_NDX;
-        @Native private static final int FIXED_LENGTH = 1 + _user_name_NDX;
+        @Native private static final int _xdg_config_home_NDX = 1 + _user_name_NDX;
+        @Native private static final int _xdg_cache_home_NDX = 1 + _xdg_config_home_NDX;
+        @Native private static final int _xdg_data_home_NDX = 1 + _xdg_cache_home_NDX;
+        @Native private static final int _xdg_state_home_NDX = 1 + _xdg_data_home_NDX;
+        @Native private static final int FIXED_LENGTH = 1 + _xdg_state_home_NDX;
 
         // Array of Strings returned from the VM and Command line properties
         // The array is not used after initialization is complete.
diff --git a/src/java.base/share/native/libjava/System.c b/src/java.base/share/native/libjava/System.c
index 098b943cc40..a2ecab85152 100644
--- a/src/java.base/share/native/libjava/System.c
+++ b/src/java.base/share/native/libjava/System.c
@@ -218,6 +218,11 @@ Java_jdk_internal_util_SystemProps_00024Raw_platformProperties(JNIEnv *env, jcla
     PUTPROP_PlatformString(propArray, _user_home_NDX, sprops->user_home);
     PUTPROP_PlatformString(propArray, _user_dir_NDX, sprops->user_dir);
 
+    PUTPROP_PlatformString(propArray, _xdg_config_home_NDX, sprops->xdg_config_home);
+    PUTPROP_PlatformString(propArray, _xdg_cache_home_NDX, sprops->xdg_cache_home);
+    PUTPROP_PlatformString(propArray, _xdg_data_home_NDX, sprops->xdg_data_home);
+    PUTPROP_PlatformString(propArray, _xdg_state_home_NDX, sprops->xdg_state_home);
+
    /*
     * Set i18n related property fields from platform.
     */
diff --git a/src/java.base/share/native/libjava/java_props.h b/src/java.base/share/native/libjava/java_props.h
index 592c158c453..9c85dffceba 100644
--- a/src/java.base/share/native/libjava/java_props.h
+++ b/src/java.base/share/native/libjava/java_props.h
@@ -54,6 +54,10 @@ typedef struct {
 
     nchar *user_name;
     nchar *user_home;
+    nchar *xdg_config_home;
+    nchar *xdg_cache_home;
+    nchar *xdg_data_home;
+    nchar *xdg_state_home;
 
     char *format_language;
     char *display_language;
diff --git a/src/java.base/unix/native/libjava/java_props_md.c b/src/java.base/unix/native/libjava/java_props_md.c
index 230de04c079..da0c4c7d41d 100644
--- a/src/java.base/unix/native/libjava/java_props_md.c
+++ b/src/java.base/unix/native/libjava/java_props_md.c
@@ -346,6 +346,22 @@ static int ParseLocale(JNIEnv* env, int cat, char ** std_language, char ** std_s
     return 1;
 }
 
+
+static char *
+GetXdg(const char *env_var, const char *default_subdir, const char *user_home)
+{
+    const char *env_value = getenv(env_var);
+    if (env_value) {
+        return strdup(env_value);
+    } else if (*user_home != '?') {
+        size_t len = strlen(user_home) + 1 + strlen(default_subdir) + 1;
+        char *def = malloc(len);
+        snprintf(def, len, "%s/%s", user_home, default_subdir);
+        return def;
+    }
+    return "?";
+}
+
 /* This function gets called very early, before VM_CALLS are setup.
  * Do not use any of the VM_CALLS entries!!!
  */
@@ -500,6 +516,12 @@ GetJavaProperties(JNIEnv *env)
         }
     }
 
+    const char *xdg_config_home_env = getenv("XDG_CONFIG_HOME");
+    sprops.xdg_config_home = GetXdg("XDG_CONFIG_HOME", ".config", sprops.user_home);
+    sprops.xdg_cache_home = GetXdg("XDG_CACHE_HOME", ".cache", sprops.user_home);
+    sprops.xdg_data_home = GetXdg("XDG_DATA_HOME", ".local/share", sprops.user_home);
+    sprops.xdg_state_home = GetXdg("XDG_STATE_HOME", ".local/state", sprops.user_home);
+
     /* User TIMEZONE
      * We defer setting up timezone until it's actually necessary.
      * Refer to TimeZone.getDefault(). The system property
-- 
2.41.0


From b0ce6d54d0fba9d4a19e4cb976b42d747abf701d Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:20:25 +0300
Subject: [PATCH 2/6] Add static properties for XDG base directories

---
 .../jdk/internal/util/StaticProperty.java     | 52 +++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
index 8460fbbd448..1a40b471c25 100644
--- a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
+++ b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
@@ -43,6 +43,10 @@ public final class StaticProperty {
     // fields during init Phase 1 and before a security manager is set.
     private static final String JAVA_HOME;
     private static final String USER_HOME;
+    private static final String XDG_CONFIG_HOME;
+    private static final String XDG_CACHE_HOME;
+    private static final String XDG_DATA_HOME;
+    private static final String XDG_STATE_HOME;
     private static final String USER_DIR;
     private static final String USER_NAME;
     private static final String JAVA_LIBRARY_PATH;
@@ -63,6 +67,10 @@ public final class StaticProperty {
         Properties props = System.getProperties();
         JAVA_HOME = getProperty(props, "java.home");
         USER_HOME = getProperty(props, "user.home");
+        XDG_CONFIG_HOME = getProperty(props, "xdg.config.home");
+        XDG_CACHE_HOME = getProperty(props, "xdg.cache.home");
+        XDG_DATA_HOME = getProperty(props, "xdg.data.home");
+        XDG_STATE_HOME = getProperty(props, "xdg.state.home");
         USER_DIR  = getProperty(props, "user.dir");
         USER_NAME = getProperty(props, "user.name");
         JAVA_IO_TMPDIR = getProperty(props, "java.io.tmpdir");
@@ -114,6 +122,50 @@ public final class StaticProperty {
         return USER_HOME;
     }
 
+        /**
+     * {@return the {@code xdg.config.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgConfigHome() {
+        return XDG_CONFIG_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.cache.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgCacheHome() {
+        return XDG_CACHE_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.data.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgDataHome() {
+        return XDG_DATA_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.state.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgStateHome() {
+        return XDG_STATE_HOME;
+    }
+
     /**
      * {@return the {@code user.dir} system property}
      *
-- 
2.41.0


From e68e43e8201d1e4e66641d7b4aaffe91bb6b1eb5 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:21:15 +0300
Subject: [PATCH 3/6] Move font cache to `XDG_CACHE_HOME`

---
 .../unix/classes/sun/font/FcFontConfiguration.java         | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
index 24eafee31a5..96f99489019 100644
--- a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
+++ b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
@@ -368,10 +368,13 @@ public class FcFontConfiguration extends FontConfiguration {
             } catch (UnknownHostException e) {
                 hostname = "localhost";
             }
-            String userDir = System.getProperty("user.home");
             String version = System.getProperty("java.version");
+	    String userHome = System.getProperty("user.home");
+	    String xdgCacheHome = System.getProperty("xdg.cache.home");
             String fs = File.separator;
-            String dir = userDir+fs+".java"+fs+"fonts"+fs+version;
+	    String dir = userHome+fs+".java"+fs+"fonts"+fs+version;
+	    if (xdgCacheHome != null)
+		dir = xdgCacheHome+fs+"java"+fs+"fonts"+fs+version;
             Locale locale = SunToolkit.getStartupLocale();
             String lang = locale.getLanguage();
             String country = locale.getCountry();
-- 
2.41.0


From 27c91cd2e485a3b25309a62c5d577987e0d27416 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:22:12 +0300
Subject: [PATCH 4/6] Move default preferences directory to `XDG_CONFIG_HOME`

---
 .../java/util/prefs/FileSystemPreferences.java     | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
index 2a894714666..2fcf8056fa3 100644
--- a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
+++ b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
@@ -121,9 +121,17 @@ class FileSystemPreferences extends AbstractPreferences {
     private static void setupUserRoot() {
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
-                userRootDir =
-                      new File(System.getProperty("java.util.prefs.userRoot",
-                      System.getProperty("user.home")), ".java/.userPrefs");
+                String preferredUserRoot = System.getProperty("java.util.prefs.userRoot");
+		String xdgConfigHome = System.getProperty("xdg.config.home");
+                if (preferredUserRoot == null) {
+		    if (xdgConfigHome == null)
+			userRootDir = new File(System.getProperty("user.home"), ".java/.userPrefs");
+		    else
+			userRootDir = new File(xdgConfigHome, "java" + File.separator + "userPrefs");
+		}
+                else {
+                    userRootDir = new File(preferredUserRoot, ".java/.userPrefs");
+		}
                 // Attempt to create root dir if it does not yet exist.
                 if (!userRootDir.exists()) {
                     if (userRootDir.mkdirs()) {
-- 
2.41.0


From a73132fa056c93f52fa935b4c752b6b1e2390cd3 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:26:04 +0300
Subject: [PATCH 5/6] Redirect all dotfiles to `$HOME/.cache/java-crud`

---
 src/java.base/share/classes/java/io/File.java | 62 ++++++++++++++-----
 1 file changed, 48 insertions(+), 14 deletions(-)

diff --git a/src/java.base/share/classes/java/io/File.java b/src/java.base/share/classes/java/io/File.java
index c106998a561..3e4257ece7d 100644
--- a/src/java.base/share/classes/java/io/File.java
+++ b/src/java.base/share/classes/java/io/File.java
@@ -37,6 +37,12 @@ import java.util.ArrayList;
 import java.util.List;
 import jdk.internal.util.StaticProperty;
 
+import static jdk.internal.util.StaticProperty.userHome;
+import static jdk.internal.util.StaticProperty.xdgConfigHome;
+import static jdk.internal.util.StaticProperty.xdgCacheHome;
+import static jdk.internal.util.StaticProperty.xdgDataHome;
+import static jdk.internal.util.StaticProperty.xdgStateHome;
+
 /**
  * An abstract representation of file and directory pathnames.
  *
@@ -248,7 +254,7 @@ public class File
      * Internal constructor for already-normalized pathname strings.
      */
     private File(String pathname, int prefixLength) {
-        this.path = pathname;
+        this.path = adjust(pathname);
         this.prefixLength = prefixLength;
     }
 
@@ -260,7 +266,7 @@ public class File
     private File(String child, File parent) {
         assert parent.path != null;
         assert (!parent.path.isEmpty());
-        this.path = fs.resolve(parent.path, child);
+        this.path = adjust(fs.resolve(parent.path, child));
         this.prefixLength = parent.prefixLength;
     }
 
@@ -277,7 +283,7 @@ public class File
         if (pathname == null) {
             throw new NullPointerException();
         }
-        this.path = fs.normalize(pathname);
+        this.path = adjust(fs.normalize(pathname));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -319,14 +325,14 @@ public class File
         }
         if (parent != null) {
             if (parent.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(fs.normalize(parent),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.normalize(parent),
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -362,14 +368,14 @@ public class File
         }
         if (parent != null) {
             if (parent.path.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(parent.path,
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(parent.path,
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -435,7 +441,7 @@ public class File
         p = fs.fromURIPath(p);
         if (File.separatorChar != '/')
             p = p.replace('/', File.separatorChar);
-        this.path = fs.normalize(p);
+        this.path = adjust(fs.normalize(p));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -2402,4 +2408,32 @@ public class File
         }
         return result;
     }
+
+    private static boolean isAcceptableDotFile(String path) {
+        return path.equals(userHome() + "/.")
+            || path.equals(userHome() + "/..")
+            || path.equals(xdgConfigHome())
+            || path.startsWith(xdgConfigHome() + "/")
+            || path.equals(xdgCacheHome())
+            || path.startsWith(xdgCacheHome() + "/")
+            || path.equals(xdgDataHome())
+            || path.startsWith(xdgDataHome() + "/")
+            || path.equals(xdgStateHome())
+            || path.startsWith(xdgStateHome() + "/");
+    }
+
+    private static String getCrud() {
+        return xdgCacheHome() + "/java-crud";
+    }
+
+    private static String crud = getCrud();
+
+    private static String adjust(String path) {
+        if (path.startsWith(userHome() + "/.")) {
+            if (isAcceptableDotFile(path))
+                return path;
+            return crud + "/" + path.substring(userHome().length() + 2); // +2 for the leading dot
+        }
+        return path;
+    }
 }
-- 
2.41.0


From 22f6a9375d6d3bfa3e489c231c6cfaf5c445d875 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 20 Aug 2023 11:26:46 +0300
Subject: [PATCH 6/6] Coerce Maven, Ivy and SBT to use XDG basedir locations

---
 .../jdk/internal/util/SystemProps.java        | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/SystemProps.java b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
index 5b7a3e1203f..dcaf916873a 100644
--- a/src/java.base/share/classes/jdk/internal/util/SystemProps.java
+++ b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
@@ -148,6 +148,32 @@ public final class SystemProps {
         fillI18nProps(props,"user.variant",  raw.propDefault(Raw._display_variant_NDX),
                 raw.propDefault(Raw._format_variant_NDX));
 
+	/* Deal with XDG basedir obsession */
+	if (configHome != null) {
+	    putIfAbsent(props, "ivy.settings.dir", configHome + "/ivy");
+	    putIfAbsent(props, "sbt.repository.config", configHome + "/sbt/repositories");
+	    putIfAbsent(props, "sbt.global.settings", configHome + "/sbt/global");
+	}
+
+	if (cacheHome != null) {
+	    putIfAbsent(props, "maven.repo.local", cacheHome + "/maven");
+
+	    putIfAbsent(props, "ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "ivy.cache.dir", cacheHome + "/ivy/cache");
+
+	    putIfAbsent(props, "sbt.ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "sbt.boot.directory", cacheHome + "/sbt/boot");
+	    putIfAbsent(props, "sbt.preloaded", cacheHome + "/sbt/preloaded");
+	    putIfAbsent(props, "sbt.global.base", cacheHome + "/sbt");
+	    putIfAbsent(props, "sbt.global.staging", cacheHome + "/sbt/staging");
+	    putIfAbsent(props, "sbt.global.zinc", cacheHome + "/sbt/zinc");
+	    putIfAbsent(props, "sbt.dependency.base", cacheHome + "/sbt/dependency");
+	}
+
+	if (stateHome != null) {
+	    putIfAbsent(props, "sbt.global.plugins", stateHome + "/sbt/plugins");
+	}
+
         return props;
     }
 
-- 
2.41.0

