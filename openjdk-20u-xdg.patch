From 2af37bc0f09ffbed15dbb12d231ed8895e951fdc Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 13 Aug 2023 10:06:25 +0300
Subject: [PATCH 1/5] Add system properties for XDG base directories

---
 .../jdk/internal/util/StaticProperty.java     | 52 +++++++++++++++++++
 src/java.base/share/native/libjli/java.c      | 42 +++++++++++++++
 2 files changed, 94 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
index 8460fbbd448..ef616030b3e 100644
--- a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
+++ b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
@@ -43,6 +43,10 @@ public final class StaticProperty {
     // fields during init Phase 1 and before a security manager is set.
     private static final String JAVA_HOME;
     private static final String USER_HOME;
+    private static final String XDG_CONFIG_HOME;
+    private static final String XDG_CACHE_HOME;
+    private static final String XDG_DATA_HOME;
+    private static final String XDG_STATE_HOME;
     private static final String USER_DIR;
     private static final String USER_NAME;
     private static final String JAVA_LIBRARY_PATH;
@@ -63,6 +67,10 @@ public final class StaticProperty {
         Properties props = System.getProperties();
         JAVA_HOME = getProperty(props, "java.home");
         USER_HOME = getProperty(props, "user.home");
+        XDG_CONFIG_HOME = getProperty(props, "xdg.config.home");
+        XDG_CACHE_HOME = getProperty(props, "xdg.cache.home");
+        XDG_DATA_HOME = getProperty(props, "xdg.data.home");
+        XDG_STATE_HOME = getProperty(props, "xdg.state.home");
         USER_DIR  = getProperty(props, "user.dir");
         USER_NAME = getProperty(props, "user.name");
         JAVA_IO_TMPDIR = getProperty(props, "java.io.tmpdir");
@@ -114,6 +122,50 @@ public final class StaticProperty {
         return USER_HOME;
     }
 
+    /**
+     * {@return the {@code xdg.config.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgConfigHome() {
+	return XDG_CONFIG_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.cache.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgCacheHome() {
+	return XDG_CACHE_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.data.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgDataHome() {
+	return XDG_DATA_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.state.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgStateHome() {
+	return XDG_STATE_HOME;
+    }
+
     /**
      * {@return the {@code user.dir} system property}
      *
diff --git a/src/java.base/share/native/libjli/java.c b/src/java.base/share/native/libjli/java.c
index 62d859c0d4f..286b65b2d7b 100644
--- a/src/java.base/share/native/libjli/java.c
+++ b/src/java.base/share/native/libjli/java.c
@@ -107,6 +107,7 @@ static int numOptions, maxOptions;
 static const char* GetFullVersion();
 static jboolean IsJavaArgs();
 static void SetJavaLauncherProp();
+static void SetXdgProps();
 static void SetClassPath(const char *s);
 static void SetMainModule(const char *s);
 static void SelectVersion(int argc, char **argv, char **main_class);
@@ -337,6 +338,9 @@ JLI_Launch(int argc, char ** argv,              /* main argc, argv */
     /* Set the -Dsun.java.launcher pseudo property */
     SetJavaLauncherProp();
 
+    /* Set -Dxdg.*.home properties */
+    SetXdgProps();
+
     return JVMInit(&ifn, threadStackSize, argc, argv, mode, what, ret);
 }
 /*
@@ -1798,6 +1802,44 @@ static void SetJavaLauncherProp() {
   AddOption("-Dsun.java.launcher=SUN_STANDARD", NULL);
 }
 
+static char *GetXdg(const char *property, const char *home, const char *envValue, const char *subDir)
+{
+  char *arg = NULL;
+
+  if (envValue && *envValue) {
+    arg = JLI_MemAlloc(JLI_StrLen("-D") + JLI_StrLen(property) + JLI_StrLen("=") + JLI_StrLen(envValue) + 1);
+    *arg = '\0';
+    JLI_StrCat(arg, "-D");
+    JLI_StrCat(arg, property);
+    JLI_StrCat(arg, "=");
+    JLI_StrCat(arg, envValue);
+  } else if (home && *home) {
+    arg = JLI_MemAlloc(JLI_StrLen("-D") + JLI_StrLen(property) + JLI_StrLen("=") + JLI_StrLen(home) + JLI_StrLen(subDir) + 1);
+    *arg = '\0';
+    JLI_StrCat(arg, "-D");
+    JLI_StrCat(arg, property);
+    JLI_StrCat(arg, "=");
+    JLI_StrCat(arg, home);
+    JLI_StrCat(arg, subDir);
+  }
+
+  return arg;
+}
+
+static void SetXdgProps()
+{
+  /* JVM seems to use pwent to figure out user.home, so this may not necessarily match that? */
+  const char *home = getenv("HOME");
+  char *xdgConfigHome = GetXdg("xdg.config.home", home, getenv("XDG_CONFIG_HOME"), "/.config");
+  char *xdgCacheHome = GetXdg("xdg.cache.home", home, getenv("XDG_CACHE_HOME"), "/.cache");
+  char *xdgDataHome = GetXdg("xdg.data.home", home, getenv("XDG_DATA_HOME"), "/.local/share");
+  char *xdgStateHome = GetXdg("xdg.state.home", home, getenv("XDG_STATE_HOME"), "/.local/state");
+  if (xdgConfigHome) AddOption(xdgConfigHome, NULL);
+  if (xdgCacheHome) AddOption(xdgCacheHome, NULL);
+  if (xdgDataHome) AddOption(xdgDataHome, NULL);
+  if (xdgStateHome) AddOption(xdgStateHome, NULL);
+}
+
 /*
  * Prints the version information from the java.version and other properties.
  */
-- 
2.41.0


From 1c05936699dc68856b092883d54fea2d47dc4d66 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 13 Aug 2023 10:11:46 +0300
Subject: [PATCH 2/5] Move font cache to `XDG_CACHE_HOME`

---
 .../unix/classes/sun/font/FcFontConfiguration.java         | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
index 24eafee31a5..96f99489019 100644
--- a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
+++ b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
@@ -368,10 +368,13 @@ public class FcFontConfiguration extends FontConfiguration {
             } catch (UnknownHostException e) {
                 hostname = "localhost";
             }
-            String userDir = System.getProperty("user.home");
             String version = System.getProperty("java.version");
+	    String userHome = System.getProperty("user.home");
+	    String xdgCacheHome = System.getProperty("xdg.cache.home");
             String fs = File.separator;
-            String dir = userDir+fs+".java"+fs+"fonts"+fs+version;
+	    String dir = userHome+fs+".java"+fs+"fonts"+fs+version;
+	    if (xdgCacheHome != null)
+		dir = xdgCacheHome+fs+"java"+fs+"fonts"+fs+version;
             Locale locale = SunToolkit.getStartupLocale();
             String lang = locale.getLanguage();
             String country = locale.getCountry();
-- 
2.41.0


From 72df914b7bfb993ee668b6cc6efe8cff9f0de6f0 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 13 Aug 2023 10:15:55 +0300
Subject: [PATCH 3/5] Move default preferences directory to `XDG_CONFIG_HOME`

---
 .../java/util/prefs/FileSystemPreferences.java     | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
index 2a894714666..2fcf8056fa3 100644
--- a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
+++ b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
@@ -121,9 +121,17 @@ class FileSystemPreferences extends AbstractPreferences {
     private static void setupUserRoot() {
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
-                userRootDir =
-                      new File(System.getProperty("java.util.prefs.userRoot",
-                      System.getProperty("user.home")), ".java/.userPrefs");
+                String preferredUserRoot = System.getProperty("java.util.prefs.userRoot");
+		String xdgConfigHome = System.getProperty("xdg.config.home");
+                if (preferredUserRoot == null) {
+		    if (xdgConfigHome == null)
+			userRootDir = new File(System.getProperty("user.home"), ".java/.userPrefs");
+		    else
+			userRootDir = new File(xdgConfigHome, "java" + File.separator + "userPrefs");
+		}
+                else {
+                    userRootDir = new File(preferredUserRoot, ".java/.userPrefs");
+		}
                 // Attempt to create root dir if it does not yet exist.
                 if (!userRootDir.exists()) {
                     if (userRootDir.mkdirs()) {
-- 
2.41.0


From 3ced77ff1cac53e848e1392ad381af1a0d03e9a8 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 13 Aug 2023 10:17:16 +0300
Subject: [PATCH 4/5] Redirect all dotfiles to `$HOME/.cache/java-crud`

---
 src/java.base/share/classes/java/io/File.java | 61 ++++++++++++++-----
 1 file changed, 47 insertions(+), 14 deletions(-)

diff --git a/src/java.base/share/classes/java/io/File.java b/src/java.base/share/classes/java/io/File.java
index c106998a561..c5623a6f3cd 100644
--- a/src/java.base/share/classes/java/io/File.java
+++ b/src/java.base/share/classes/java/io/File.java
@@ -36,6 +36,11 @@ import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.List;
 import jdk.internal.util.StaticProperty;
+import static jdk.internal.util.StaticProperty.userHome;
+import static jdk.internal.util.StaticProperty.xdgConfigHome;
+import static jdk.internal.util.StaticProperty.xdgCacheHome;
+import static jdk.internal.util.StaticProperty.xdgDataHome;
+import static jdk.internal.util.StaticProperty.xdgStateHome;
 
 /**
  * An abstract representation of file and directory pathnames.
@@ -248,7 +253,7 @@ public class File
      * Internal constructor for already-normalized pathname strings.
      */
     private File(String pathname, int prefixLength) {
-        this.path = pathname;
+        this.path = adjust(pathname);
         this.prefixLength = prefixLength;
     }
 
@@ -260,7 +265,7 @@ public class File
     private File(String child, File parent) {
         assert parent.path != null;
         assert (!parent.path.isEmpty());
-        this.path = fs.resolve(parent.path, child);
+        this.path = adjust(fs.resolve(parent.path, child));
         this.prefixLength = parent.prefixLength;
     }
 
@@ -277,7 +282,7 @@ public class File
         if (pathname == null) {
             throw new NullPointerException();
         }
-        this.path = fs.normalize(pathname);
+        this.path = adjust(fs.normalize(pathname));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -319,14 +324,14 @@ public class File
         }
         if (parent != null) {
             if (parent.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(fs.normalize(parent),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.normalize(parent),
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -362,14 +367,14 @@ public class File
         }
         if (parent != null) {
             if (parent.path.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(parent.path,
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(parent.path,
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -435,7 +440,7 @@ public class File
         p = fs.fromURIPath(p);
         if (File.separatorChar != '/')
             p = p.replace('/', File.separatorChar);
-        this.path = fs.normalize(p);
+        this.path = adjust(fs.normalize(p));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -2402,4 +2407,32 @@ public class File
         }
         return result;
     }
+
+    private static boolean isAcceptableDotFile(String path) {
+        return path.equals(userHome() + "/.")
+            || path.equals(userHome() + "/..")
+            || path.equals(xdgConfigHome())
+            || path.startsWith(xdgConfigHome() + "/")
+            || path.equals(xdgCacheHome())
+            || path.startsWith(xdgCacheHome() + "/")
+            || path.equals(xdgDataHome())
+            || path.startsWith(xdgDataHome() + "/")
+            || path.equals(xdgStateHome())
+            || path.startsWith(xdgStateHome() + "/");
+    }
+
+    private static String getCrud() {
+        return xdgCacheHome() + "/java-crud";
+    }
+
+    private static String crud = getCrud();
+
+    private static String adjust(String path) {
+        if (path.startsWith(userHome() + "/.")) {
+            if (isAcceptableDotFile(path))
+                return path;
+            return crud + "/" + path.substring(userHome().length() + 2); // +2 for the leading dot
+        }
+        return path;
+    }
 }
-- 
2.41.0


From 57a58cd3c89a074997328de9b0f1aec5d36a5f05 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Sun, 13 Aug 2023 10:17:47 +0300
Subject: [PATCH 5/5] Coerce Maven, Ivy and SBT to use XDG basedir locations
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

So that I don’t need to use `_JAVA_OPTIONS`, which comes with a warning.
---
 .../jdk/internal/util/SystemProps.java        | 31 +++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/SystemProps.java b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
index b6aa1ef855e..7a4561b4e0b 100644
--- a/src/java.base/share/classes/jdk/internal/util/SystemProps.java
+++ b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
@@ -139,6 +139,37 @@ public final class SystemProps {
         fillI18nProps(props,"user.variant",  raw.propDefault(Raw._display_variant_NDX),
                 raw.propDefault(Raw._format_variant_NDX));
 
+	/* Deal with XDG basedir obsession */
+	String configHome = props.get("xdg.config.home");
+	String cacheHome = props.get("xdg.cache.home");
+	String dataHome = props.get("xdg.data.home");
+	String stateHome = props.get("xdg.state.home");
+
+	if (configHome != null) {
+	    putIfAbsent(props, "ivy.settings.dir", configHome + "/ivy");
+	    putIfAbsent(props, "sbt.repository.config", configHome + "/sbt/repositories");
+	    putIfAbsent(props, "sbt.global.settings", configHome + "/sbt/global");
+	}
+
+	if (cacheHome != null) {
+	    putIfAbsent(props, "maven.repo.local", cacheHome + "/maven");
+
+	    putIfAbsent(props, "ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "ivy.cache.dir", cacheHome + "/ivy/cache");
+
+	    putIfAbsent(props, "sbt.ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "sbt.boot.directory", cacheHome + "/sbt/boot");
+	    putIfAbsent(props, "sbt.preloaded", cacheHome + "/sbt/preloaded");
+	    putIfAbsent(props, "sbt.global.base", cacheHome + "/sbt");
+	    putIfAbsent(props, "sbt.global.staging", cacheHome + "/sbt/staging");
+	    putIfAbsent(props, "sbt.global.zinc", cacheHome + "/sbt/zinc");
+	    putIfAbsent(props, "sbt.dependency.base", cacheHome + "/sbt/dependency");
+	}
+
+	if (stateHome != null) {
+	    putIfAbsent(props, "sbt.global.plugins", stateHome + "/sbt/plugins");
+	}
+
         return props;
     }
 
-- 
2.41.0

