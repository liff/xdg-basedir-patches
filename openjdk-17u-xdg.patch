From 9231ab59ae5ddc8d1adc464d43db8358c534f4fe Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:04:51 +0300
Subject: [PATCH 1/6] Add XDG base directories as system properties

---
 src/hotspot/share/runtime/arguments.cpp | 35 +++++++++++++++++++++++++
 src/hotspot/share/runtime/arguments.hpp |  3 +++
 src/hotspot/share/runtime/thread.cpp    |  2 ++
 3 files changed, 40 insertions(+)

diff --git a/src/hotspot/share/runtime/arguments.cpp b/src/hotspot/share/runtime/arguments.cpp
index 5683e4fe025..84ebc5eb71e 100644
--- a/src/hotspot/share/runtime/arguments.cpp
+++ b/src/hotspot/share/runtime/arguments.cpp
@@ -438,6 +438,41 @@ void Arguments::init_version_specific_system_properties() {
       new SystemProperty("java.vm.vendor", VM_Version::vm_vendor(),  false));
 }
 
+void Arguments::init_xdg_properties() {
+  /* JVM seems to use pwent to figure out user.home, so this may not necessarily match that? */
+  const char *home = getenv("HOME");
+
+  char *xdg_config_home = getenv("XDG_CONFIG_HOME");
+  if (!xdg_config_home) {
+    xdg_config_home = NEW_C_HEAP_ARRAY(char, strlen(home) + 1 + strlen(".config") + 1, mtArguments);
+    sprintf(xdg_config_home, "%s/.config", home);
+  }
+  char *xdg_cache_home = getenv("XDG_CACHE_HOME");
+  if (!xdg_cache_home) {
+    xdg_cache_home = NEW_C_HEAP_ARRAY(char, strlen(home) + 1 + strlen(".cache") + 1, mtArguments);
+    sprintf(xdg_cache_home, "%s/.cache", home);
+  }
+  char *xdg_data_home = getenv("XDG_DATA_HOME");
+  if (!xdg_data_home) {
+    xdg_data_home = NEW_C_HEAP_ARRAY(char, strlen(home) + 1 + strlen(".local/share") + 1, mtArguments);
+    sprintf(xdg_data_home, "%s/.local/share", home);
+  }
+  char *xdg_state_home = getenv("XDG_STATE_HOME");
+  if (!xdg_state_home) {
+    xdg_state_home = NEW_C_HEAP_ARRAY(char, strlen(home) + 1 + strlen(".local/state") + 1, mtArguments);
+    sprintf(xdg_state_home, "%s/.local/state", home);
+  }
+
+  if (xdg_config_home)
+    PropertyList_add(&_system_properties, new SystemProperty("xdg.config.home", xdg_config_home, false));
+  if (xdg_cache_home)
+    PropertyList_add(&_system_properties, new SystemProperty("xdg.cache.home", xdg_cache_home, false));
+  if (xdg_data_home)
+    PropertyList_add(&_system_properties, new SystemProperty("xdg.data.home", xdg_data_home, false));
+  if (xdg_state_home)
+    PropertyList_add(&_system_properties, new SystemProperty("xdg.state.home", xdg_state_home, false));
+}
+
 /*
  *  -XX argument processing:
  *
diff --git a/src/hotspot/share/runtime/arguments.hpp b/src/hotspot/share/runtime/arguments.hpp
index 3876be4a9da..10b0ca0dfb1 100644
--- a/src/hotspot/share/runtime/arguments.hpp
+++ b/src/hotspot/share/runtime/arguments.hpp
@@ -559,6 +559,9 @@ class Arguments : AllStatic {
   // Update/Initialize System properties after JDK version number is known
   static void init_version_specific_system_properties();
 
+  // XDG basedir properties
+  static void init_xdg_properties();
+
   // Update VM info property - called after argument parsing
   static void update_vm_info_property(const char* vm_info) {
     _vm_info->set_value(vm_info);
diff --git a/src/hotspot/share/runtime/thread.cpp b/src/hotspot/share/runtime/thread.cpp
index 6f64bc4908c..e3a39768933 100644
--- a/src/hotspot/share/runtime/thread.cpp
+++ b/src/hotspot/share/runtime/thread.cpp
@@ -2781,6 +2781,8 @@ jint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {
   // Initialize system properties.
   Arguments::init_system_properties();
 
+  Arguments::init_xdg_properties();
+
   // So that JDK version can be used as a discriminator when parsing arguments
   JDK_Version_init();
 
-- 
2.41.0


From 85fdfcb8a8766c5981e0f561a66bdca1c4ac0f12 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:08:38 +0300
Subject: [PATCH 2/6] Add static properties for XDG base directories

---
 .../jdk/internal/util/StaticProperty.java     | 52 +++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
index 896f4330036..0cf534e526f 100644
--- a/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
+++ b/src/java.base/share/classes/jdk/internal/util/StaticProperty.java
@@ -42,6 +42,10 @@ public final class StaticProperty {
     // fields during init Phase 1 and before a security manager is set.
     private static final String JAVA_HOME;
     private static final String USER_HOME;
+    private static final String XDG_CONFIG_HOME;
+    private static final String XDG_CACHE_HOME;
+    private static final String XDG_DATA_HOME;
+    private static final String XDG_STATE_HOME;
     private static final String USER_DIR;
     private static final String USER_NAME;
     private static final String JAVA_LIBRARY_PATH;
@@ -57,6 +61,10 @@ public final class StaticProperty {
         Properties props = System.getProperties();
         JAVA_HOME = getProperty(props, "java.home");
         USER_HOME = getProperty(props, "user.home");
+        XDG_CONFIG_HOME = getProperty(props, "xdg.config.home");
+        XDG_CACHE_HOME = getProperty(props, "xdg.cache.home");
+        XDG_DATA_HOME = getProperty(props, "xdg.data.home");
+        XDG_STATE_HOME = getProperty(props, "xdg.state.home");
         USER_DIR  = getProperty(props, "user.dir");
         USER_NAME = getProperty(props, "user.name");
         JAVA_IO_TMPDIR = getProperty(props, "java.io.tmpdir");
@@ -107,6 +115,50 @@ public final class StaticProperty {
         return USER_HOME;
     }
 
+    /**
+     * {@return the {@code xdg.config.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgConfigHome() {
+	return XDG_CONFIG_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.cache.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgCacheHome() {
+	return XDG_CACHE_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.data.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgDataHome() {
+	return XDG_DATA_HOME;
+    }
+
+    /**
+     * {@return the {@code xdg.state.home} system property}
+     *
+     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked
+     * in this method. The caller of this method should take care to ensure
+     * that the returned property is not made accessible to untrusted code.</strong>
+     */
+    public static String xdgStateHome() {
+	return XDG_STATE_HOME;
+    }
+
     /**
      * Return the {@code user.dir} system property.
      *
-- 
2.41.0


From feca6775d31ea4bffbd3957bfcad48e7ffb01711 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:11:43 +0300
Subject: [PATCH 3/6] Move font cache to `XDG_CACHE_HOME`

---
 .../unix/classes/sun/font/FcFontConfiguration.java         | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
index 0ea741c1ccf..bf253564b0d 100644
--- a/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
+++ b/src/java.desktop/unix/classes/sun/font/FcFontConfiguration.java
@@ -365,10 +365,13 @@ public class FcFontConfiguration extends FontConfiguration {
             } catch (UnknownHostException e) {
                 hostname = "localhost";
             }
-            String userDir = System.getProperty("user.home");
             String version = System.getProperty("java.version");
+	    String userHome = System.getProperty("user.home");
+	    String xdgCacheHome = System.getProperty("xdg.cache.home");
             String fs = File.separator;
-            String dir = userDir+fs+".java"+fs+"fonts"+fs+version;
+	    String dir = userHome+fs+".java"+fs+"fonts"+fs+version;
+	    if (xdgCacheHome != null)
+		dir = xdgCacheHome+fs+"java"+fs+"fonts"+fs+version;
             Locale locale = SunToolkit.getStartupLocale();
             String lang = locale.getLanguage();
             String country = locale.getCountry();
-- 
2.41.0


From 851360c0032873cbfe5aa4ee56afa6db7d91b6d2 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:13:11 +0300
Subject: [PATCH 4/6] Move default preferences directory to `XDG_CONFIG_HOME`

---
 .../java/util/prefs/FileSystemPreferences.java     | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
index b30a23465c5..e0f8e12470b 100644
--- a/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
+++ b/src/java.prefs/unix/classes/java/util/prefs/FileSystemPreferences.java
@@ -114,9 +114,17 @@ class FileSystemPreferences extends AbstractPreferences {
     private static void setupUserRoot() {
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
-                userRootDir =
-                      new File(System.getProperty("java.util.prefs.userRoot",
-                      System.getProperty("user.home")), ".java/.userPrefs");
+                String preferredUserRoot = System.getProperty("java.util.prefs.userRoot");
+		String xdgConfigHome = System.getProperty("xdg.config.home");
+                if (preferredUserRoot == null) {
+		    if (xdgConfigHome == null)
+			userRootDir = new File(System.getProperty("user.home"), ".java/.userPrefs");
+		    else
+			userRootDir = new File(xdgConfigHome, "java" + File.separator + "userPrefs");
+		}
+                else {
+                    userRootDir = new File(preferredUserRoot, ".java/.userPrefs");
+		}
                 // Attempt to create root dir if it does not yet exist.
                 if (!userRootDir.exists()) {
                     if (userRootDir.mkdirs()) {
-- 
2.41.0


From 9446edc4895693446f8c26c96bd73ec7998ffe75 Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:17:36 +0300
Subject: [PATCH 5/6] Redirect all dotfiles to `$HOME/.cache/java-crud`

---
 src/java.base/share/classes/java/io/File.java | 61 ++++++++++++++-----
 1 file changed, 47 insertions(+), 14 deletions(-)

diff --git a/src/java.base/share/classes/java/io/File.java b/src/java.base/share/classes/java/io/File.java
index 36a465ba53f..2d9c584d77b 100644
--- a/src/java.base/share/classes/java/io/File.java
+++ b/src/java.base/share/classes/java/io/File.java
@@ -36,6 +36,11 @@ import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.List;
 import sun.security.action.GetPropertyAction;
+import static jdk.internal.util.StaticProperty.userHome;
+import static jdk.internal.util.StaticProperty.xdgConfigHome;
+import static jdk.internal.util.StaticProperty.xdgCacheHome;
+import static jdk.internal.util.StaticProperty.xdgDataHome;
+import static jdk.internal.util.StaticProperty.xdgStateHome;
 
 /**
  * An abstract representation of file and directory pathnames.
@@ -248,7 +253,7 @@ public class File
      * Internal constructor for already-normalized pathname strings.
      */
     private File(String pathname, int prefixLength) {
-        this.path = pathname;
+        this.path = adjust(pathname);
         this.prefixLength = prefixLength;
     }
 
@@ -260,7 +265,7 @@ public class File
     private File(String child, File parent) {
         assert parent.path != null;
         assert (!parent.path.isEmpty());
-        this.path = fs.resolve(parent.path, child);
+        this.path = adjust(fs.resolve(parent.path, child));
         this.prefixLength = parent.prefixLength;
     }
 
@@ -277,7 +282,7 @@ public class File
         if (pathname == null) {
             throw new NullPointerException();
         }
-        this.path = fs.normalize(pathname);
+        this.path = adjust(fs.normalize(pathname));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -319,14 +324,14 @@ public class File
         }
         if (parent != null) {
             if (parent.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(fs.normalize(parent),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.normalize(parent),
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -362,14 +367,14 @@ public class File
         }
         if (parent != null) {
             if (parent.path.isEmpty()) {
-                this.path = fs.resolve(fs.getDefaultParent(),
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(fs.getDefaultParent(),
+                                              fs.normalize(child)));
             } else {
-                this.path = fs.resolve(parent.path,
-                                       fs.normalize(child));
+                this.path = adjust(fs.resolve(parent.path,
+                                              fs.normalize(child)));
             }
         } else {
-            this.path = fs.normalize(child);
+            this.path = adjust(fs.normalize(child));
         }
         this.prefixLength = fs.prefixLength(this.path);
     }
@@ -435,7 +440,7 @@ public class File
         p = fs.fromURIPath(p);
         if (File.separatorChar != '/')
             p = p.replace('/', File.separatorChar);
-        this.path = fs.normalize(p);
+        this.path = adjust(fs.normalize(p));
         this.prefixLength = fs.prefixLength(this.path);
     }
 
@@ -2391,4 +2396,32 @@ public class File
         }
         return result;
     }
+
+    private static boolean isAcceptableDotFile(String path) {
+        return path.equals(userHome() + "/.")
+            || path.equals(userHome() + "/..")
+            || path.equals(xdgConfigHome())
+            || path.startsWith(xdgConfigHome() + "/")
+            || path.equals(xdgCacheHome())
+            || path.startsWith(xdgCacheHome() + "/")
+            || path.equals(xdgDataHome())
+            || path.startsWith(xdgDataHome() + "/")
+            || path.equals(xdgStateHome())
+            || path.startsWith(xdgStateHome() + "/");
+    }
+
+    private static String getCrud() {
+        return xdgCacheHome() + "/java-crud";
+    }
+
+    private static String crud = getCrud();
+
+    private static String adjust(String path) {
+        if (path.startsWith(userHome() + "/.")) {
+            if (isAcceptableDotFile(path))
+                return path;
+            return crud + "/" + path.substring(userHome().length() + 2); // +2 for the leading dot
+        }
+        return path;
+    }
 }
-- 
2.41.0


From 08b02eb331bb602bed29afcf2dc1f1b09a02433d Mon Sep 17 00:00:00 2001
From: Olli Helenius <liff@iki.fi>
Date: Wed, 16 Aug 2023 08:18:42 +0300
Subject: [PATCH 6/6] Coerce Maven, Ivy and SBT to use XDG basedir locations

---
 .../jdk/internal/util/SystemProps.java        | 31 +++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/src/java.base/share/classes/jdk/internal/util/SystemProps.java b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
index bb4fd699450..6ed51519803 100644
--- a/src/java.base/share/classes/jdk/internal/util/SystemProps.java
+++ b/src/java.base/share/classes/jdk/internal/util/SystemProps.java
@@ -110,6 +110,37 @@ public final class SystemProps {
         fillI18nProps(props,"user.variant",  raw.propDefault(Raw._display_variant_NDX),
                 raw.propDefault(Raw._format_variant_NDX));
 
+	/* Deal with XDG basedir obsession */
+	String configHome = props.get("xdg.config.home");
+	String cacheHome = props.get("xdg.cache.home");
+	String dataHome = props.get("xdg.data.home");
+	String stateHome = props.get("xdg.state.home");
+
+	if (configHome != null) {
+	    putIfAbsent(props, "ivy.settings.dir", configHome + "/ivy");
+	    putIfAbsent(props, "sbt.repository.config", configHome + "/sbt/repositories");
+	    putIfAbsent(props, "sbt.global.settings", configHome + "/sbt/global");
+	}
+
+	if (cacheHome != null) {
+	    putIfAbsent(props, "maven.repo.local", cacheHome + "/maven");
+
+	    putIfAbsent(props, "ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "ivy.cache.dir", cacheHome + "/ivy/cache");
+
+	    putIfAbsent(props, "sbt.ivy.home", cacheHome + "/ivy");
+	    putIfAbsent(props, "sbt.boot.directory", cacheHome + "/sbt/boot");
+	    putIfAbsent(props, "sbt.preloaded", cacheHome + "/sbt/preloaded");
+	    putIfAbsent(props, "sbt.global.base", cacheHome + "/sbt");
+	    putIfAbsent(props, "sbt.global.staging", cacheHome + "/sbt/staging");
+	    putIfAbsent(props, "sbt.global.zinc", cacheHome + "/sbt/zinc");
+	    putIfAbsent(props, "sbt.dependency.base", cacheHome + "/sbt/dependency");
+	}
+
+	if (stateHome != null) {
+	    putIfAbsent(props, "sbt.global.plugins", stateHome + "/sbt/plugins");
+	}
+
         return props;
     }
 
-- 
2.41.0

